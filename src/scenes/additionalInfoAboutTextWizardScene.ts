import {Scenes} from "telegraf";
import {MyContext} from "../index";
import asyncWrapper from "../utils/error-handler";
import {handleStartCommand} from "../utils/handleStartCommand";
import {WizardScene} from "telegraf/typings/scenes";

const additionalInfoAboutTextWizardScene:WizardScene<MyContext> = new Scenes.WizardScene<MyContext>(
    'additionalInfoAboutTextWizardScene',

    asyncWrapper(async (ctx:MyContext):Promise<void> => {
        await ctx.reply('–•–æ—á–µ—à—å –ª–∏ —Ç—ã –¥–æ–±–∞–≤–∏—Ç—å –≤ —Ç—Ä–µ–∫ –≤–∞–∂–Ω—ã–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–ª–∏ –º–æ–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤–∞—Å —Å–≤—è–∑—ã–≤–∞—é—Ç? üí≠ –ù–∞–ø—Ä–∏–º–µ—Ä, —Å–æ–≤–º–µ—Å—Ç–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –∏–ª–∏ –ª—é–±–∏–º—ã–µ —à—É—Ç–∫–∏?', {
            reply_markup: {
                keyboard: [['–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å']],
                resize_keyboard: true,
                one_time_keyboard: true
            }
        });
        await ctx.wizard.next();
    }),


    asyncWrapper(async (ctx:MyContext):Promise<void> => {
        ctx.session.memories = 'text' in ctx.message ? ctx.message?.text : "";
        await ctx.scene.enter('voiceScene');
    })
);

additionalInfoAboutTextWizardScene.command("start", asyncWrapper(handleStartCommand));


export default additionalInfoAboutTextWizardScene
