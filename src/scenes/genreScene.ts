import {Markup, Scenes} from "telegraf";
import {MyContext} from "../index";
import {Genres} from "../constants";
import {handleStartCommand} from "../utils/handleStartCommand";
import {deletePreviousMessage} from "../utils/deletePreviousMessage";
import asyncWrapper from "../utils/error-handler";
import {BaseScene} from "telegraf/typings/scenes";

const genreScene:BaseScene<MyContext> = new Scenes.BaseScene<MyContext>('genreScene');

genreScene.enter(asyncWrapper(async (ctx:MyContext):Promise<void> => {
    const sentMessage = await ctx.reply(
        '–ö–∞–∫–æ–π –∂–∞–Ω—Ä –ø–µ—Å–Ω–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ? üé§',
        Markup.inlineKeyboard([
            [Markup.button.callback('–ü–æ–ø üï∫', Genres.pop)],
            [Markup.button.callback('–†—ç–ø üéß', Genres.rap)],
            [Markup.button.callback('–î–∂–∞–∑ üé∑', Genres.jazz)],
            [Markup.button.callback('–®–∞–Ω—Å–æ–Ω üé§', Genres.chanson)],
            [Markup.button.callback('–†–æ–∫ ü§ò', Genres.rock)],
        ])
    );
    ctx.session.messageToDelete = sentMessage.message_id;
}));

genreScene.on('text', asyncWrapper(async (ctx:MyContext):Promise<void> => {
    await deletePreviousMessage(ctx);
    await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Å –∫–Ω–æ–ø–æ–∫ üëá.');
    await ctx.scene.enter("voiceScene")
}));

genreScene.command("start", asyncWrapper(handleStartCommand));


genreScene.on('callback_query', asyncWrapper(async (ctx:MyContext):Promise<void> => {
    const genre = 'data' in ctx.callbackQuery ? (ctx.callbackQuery?.data as string) : "";
    ctx.session.genre = genre || '';

    await deletePreviousMessage(ctx);

    // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ü–µ–Ω—É
    await ctx.scene.enter('firstGenerationTextScene');
}));

genreScene.command("start", asyncWrapper(handleStartCommand));


export default genreScene;
