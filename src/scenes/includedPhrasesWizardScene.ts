// –°—Ü–µ–Ω–∞ –¥–ª—è –≤–≤–æ–¥–∞ –≤–∫–ª—é—á—ë–Ω–Ω—ã—Ö —Ñ—Ä–∞–∑
import {MyContext} from "../index";
import {Scenes} from "telegraf";
import asyncWrapper from "../utils/error-handler";
import {handleStartCommand} from "../utils/handleStartCommand";
import { WizardScene} from "telegraf/typings/scenes";

const includedPhrasesWizardScene:WizardScene<MyContext> = new Scenes.WizardScene<MyContext>(
    'includedPhrasesWizardScene',

    asyncWrapper(async (ctx: MyContext):Promise<void> => {
        await ctx.reply('–ï—Å—Ç—å –ª–∏ —Å–ª–æ–≤–∞ –∏–ª–∏ —Ñ—Ä–∞–∑—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã —Ö–æ—á–µ—à—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤–∫–ª—é—á–∏—Ç—å –≤ –ø–µ—Å–Ω—é? üìù', {
            reply_markup: {
                keyboard: [['–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å']],
                resize_keyboard: true,
                one_time_keyboard: true
            }
        });
        await ctx.wizard.next();
    }),

    asyncWrapper(async (ctx: MyContext):Promise<void> => {
        const includedPhrases = 'text' in ctx.message ? ctx.message.text : '';
        ctx.session.includedPhrases = includedPhrases;
        await ctx.scene.enter('additionalInfoAboutTextWizardScene');
    })
);


includedPhrasesWizardScene.command("start", asyncWrapper(handleStartCommand));

export default includedPhrasesWizardScene;
