import { Markup, Scenes } from "telegraf";
import { MyContext } from "../index";
import { Purpose } from "../constants";
import {deletePreviousMessage} from "../utils/deletePreviousMessage";
import {handleStartCommand} from "../utils/handleStartCommand";
import asyncWrapper from "../utils/error-handler";
import {handleTextWithReplyForChoosingButton} from "../utils/handleTextWithReplyForChoosingButton";
import {BaseScene} from "telegraf/typings/scenes";

async function sendPurposeMessage(ctx: MyContext):Promise<void> {

    const sentMessage = await ctx.reply(
        '–ê —Ç–µ–ø–µ—Ä—å —Ä–∞—Å—Å–∫–∞–∂–∏, –¥–ª—è —á–µ–≥–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–æ–∑–¥–∞—Ç—å —ç—Ç–æ—Ç —Ç—Ä–µ–∫? üéØ',
        Markup.inlineKeyboard([
            [Markup.button.callback('–î–ª—è –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è üéâ', Purpose.congratulation)],
            [Markup.button.callback('–î–ª—è –∏–∑–≤–∏–Ω–µ–Ω–∏—è üôè', Purpose.apology)],
            [Markup.button.callback('–í—ã—Ä–∞–∂–µ–Ω–∏–µ —á—É–≤—Å—Ç–≤ üíñ', Purpose.feeling)],
            [Markup.button.callback('–ú–æ—Ç–∏–≤–∞—Ü–∏—è üí™', Purpose.motivation)],
            [Markup.button.callback('–î—Ä—É–≥–æ–µ ‚úçÔ∏è', Purpose.other)],
        ])
    );
    ctx.session.messageToDelete = sentMessage.message_id;
}

const mainScene:BaseScene<MyContext> = new Scenes.BaseScene<MyContext>('mainScene');

mainScene.enter(asyncWrapper(async (ctx:MyContext):Promise<void> => {
    await ctx.reply('–ü—Ä–∏–≤–µ—Ç! üëã –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–æ–∑–¥–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ç—Ä–µ–∫ üé∂, –∫–æ—Ç–æ—Ä—ã–π —Ç–æ—á–Ω–æ –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è! üòä');
    await sendPurposeMessage(ctx);
}));

mainScene.command("start", asyncWrapper(handleStartCommand));

mainScene.on('text', handleTextWithReplyForChoosingButton("mainScene"));

mainScene.on('callback_query', asyncWrapper(async (ctx:MyContext):Promise<void> => {
    await deletePreviousMessage(ctx);

    ctx.session.purpose = 'data' in ctx.callbackQuery ? ctx.callbackQuery?.data as string : "";

    switch (ctx.session.purpose) {
        case Purpose.congratulation:
            await ctx.scene.enter('congratulationWizardScene');
            break;
        case Purpose.apology:
            await ctx.scene.enter('apologyScene');
            break;
        case Purpose.feeling:
            await ctx.scene.enter('feelingsScene');
            break;
        case Purpose.motivation:
            await ctx.scene.enter('motivationWizardScene');
            break;
        case Purpose.other:
            await ctx.scene.enter('anotherGoalForTrackScene');
            break;
        default:
            await ctx.scene.enter('anotherGoalForTrackScene');
            break;
    }
}));

mainScene.command("start", asyncWrapper(handleStartCommand));

export default mainScene;
