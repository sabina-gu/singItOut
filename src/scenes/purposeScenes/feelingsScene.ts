import { MyContext } from "../../../index";
import { Markup, Scenes } from "telegraf";
import {deletePreviousMessage} from "../../utils/deletePreviousMessage";
import {handleStartCommand} from "../../utils/handleStartCommand";
import asyncWrapper from "../../utils/error-handler";
import {handleTextWithReplyForChoosingButton} from "../../utils/handleTextWithReplyForChoosingButton";
import {BaseScene} from "telegraf/typings/scenes";
import {EmotionTypes} from "../../constants";

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
async function sendFeelingsMessage(ctx: MyContext):Promise<void> {
    const sentMessage = await ctx.reply(
        '–ö–∞–∫–∏–µ —á—É–≤—Å—Ç–≤–∞ —Ç—ã —Ö–æ—á–µ—à—å –ø–µ—Ä–µ–¥–∞—Ç—å? üíï',
        Markup.inlineKeyboard([
            [Markup.button.callback('–õ—é–±–æ–≤—å ‚ù§Ô∏è', EmotionTypes.Love)],
            [Markup.button.callback('–ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å üôè', EmotionTypes.Gratitude)],
            [Markup.button.callback('–î—Ä—É–∂–±—É ü§ó', EmotionTypes.Friendship)],
            [Markup.button.callback('–°–æ—á—É–≤—Å—Ç–≤–∏–µ ü§ç', EmotionTypes.Sympathy)],
            [Markup.button.callback('–£–≤–∞–∂–µ–Ω–∏–µ üåü', EmotionTypes.Respect)],
            [Markup.button.callback('–ü–æ–¥–¥–µ—Ä–∂–∫—É üí™', EmotionTypes.Support)],
            [Markup.button.callback('–î—Ä—É–≥–æ–µ (–æ–ø–∏—à–∏) üåº', EmotionTypes.Other)],
        ])
    );
    ctx.session.messageToDelete = sentMessage.message_id;
}

const feelingsScene:BaseScene<MyContext> = new Scenes.BaseScene<MyContext>('feelingsScene');

feelingsScene.enter(asyncWrapper(async (ctx:MyContext):Promise<void> => {
    await sendFeelingsMessage(ctx);
}));

feelingsScene.command("start", asyncWrapper(handleStartCommand));


feelingsScene.on('text', handleTextWithReplyForChoosingButton("feelingsScene"));


feelingsScene.command("start", asyncWrapper(handleStartCommand));


feelingsScene.on('callback_query', asyncWrapper(async (ctx:MyContext):Promise<unknown> => {
    const feeling:string = 'data' in ctx.callbackQuery ? ctx.callbackQuery?.data as string : "";
    ctx.session.subPurpose = feeling;

    await deletePreviousMessage(ctx);

    if (feeling === EmotionTypes.Other) {
        return ctx.scene.enter('customFeelingScene');
    } else {
        await ctx.scene.enter('recipientStatusScene');
    }
}));

feelingsScene.command("start", asyncWrapper(handleStartCommand));



export default feelingsScene ;
